{"version":3,"sources":["DogList.js","DogDetails.js","Routes.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["DogList","className","aria-label","this","props","dogs","map","dog","key","name","to","src","photo","alt","Component","DogDetails","getDog","currentDog","match","params","pet","toLowerCase","pic","age","gender","size","description","href","url","target","Routers","exact","path","render","Navbar","dogLinks","type","data-toggle","data-target","aria-controls","aria-expanded","id","App","getDogs","client","Client","apiKey","secret","Pets","animal","search","location","limit","then","res","data","animals","photos","length","large","push","setState","isLoading","catch","e","console","log","state","ren","Routes","aria-role","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cae5b49b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './DogList.css';\n\nclass DogList extends Component {\n    render() {       \n        return(\n            <div className=\"DogList\">\n                <h1 className=\"display-1 text-center mt-4 mb-4\"><i className=\"em em-heartpulse\"  aria-label=\"GROWING HEART\"></i>Adopt!<i className=\"em em-heartpulse\"  aria-label=\"GROWING HEART\"></i></h1>    \n                    <div className=\"row\">\n                        {this.props.dogs.map(dog => (\n                            <div className=\"Dog col-md-6 col-lg-4 col-xl-3 text-center\" key={dog.name}>\n                                <Link  to={`/AdoptionApp/${dog.name}`} >            \n                                    <img className=\"rounded-circle\" src={dog.photo} alt={dog.name} />\n                                    <h3 className=\"Underline\">       \n                                        {dog.name}\n                                    </h3>\n                                </Link>\n                            </div>\n                        ))}\n                        \n                    </div>\n            </div>\n        );  \n    }\n}\n\nexport default DogList;","import React, { Component } from 'react';\nimport './DogDetails.css';\n\nclass DogDetails extends Component {\n    \n    getDog = (props) => {\n        let name = props.match.params.name;\n        let currentDog;\n        // console.log(props.dogs)\n        const petArr = props.dogs;\n        petArr.map( pet => \n            {if(pet.name.toLowerCase() === name.toLowerCase()) return currentDog = pet }\n            );\n        // console.log(currentDog)\n        return currentDog;\n       \n    }\n    \n\n    render(){\n        // let name = this.props.match.params.name;\n        let dog = this.getDog(this.props);\n        // console.log(dog)\n        let pic = dog.photo;\n        return (\n        <div className=\"DogDetails row justify-content-center mt-5\">\n            <div className=\"col-11 col-lg-5\">\n                <div className=\"DogDetails-card card mb-5\">\n                    <img className=\"card-img-top\" src={pic} alt={dog.name} /> \n                    <div className=\"card-body\">\n                        <h2 className=\"card-title\">\n                            {dog.name}\n                        </h2>\n                        \n\n                        <h4 className=\"card-subtitle text-muted\">\n                        Age: {dog.age} \n                        </h4>\n                        <h4 className=\"mt-1 card-subtitle text-muted\">\n                        {dog.gender} \n                        </h4>\n                        <h4 className=\"mt-1 card-subtitle text-muted\">\n                        Size: {dog.size} \n                        </h4>\n                    </div>\n                    <ul className=\"list-group list-group-flush\">\n                    \n                            <li className=\"list-group-item\">{dog.description}</li>\n                    \n                    </ul>\n                    <div className=\"card-body\">\n                        <a href={dog.url} target=\"_blank\" className=\"btn btn-info\">Adopt Me</a>\n                    </div>\n                </div>  \n            </div>\n        </div>\n        );\n    }\n}\n\nexport default DogDetails;","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport DogList from './DogList';\nimport DogDetails from './DogDetails';\n\nclass Routers extends Component {\n    \n    render(){        \n        return (\n            <Switch>\n                <Route exact path=\"/AdoptionApp/\" render={() => <DogList dogs={this.props.dogs}/>} />\n                <Route exact path=\"/AdoptionApp/:name\" render={(props) => (<DogDetails dogs={this.props.dogs} {...props}/>)} />\n                <Redirect to=\"/AdoptionApp/\" />\n            </Switch>\n        );\n    }\n}\n\nexport default Routers;","import React, { Component } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n\nclass Navbar extends Component {\n    render(){\n        const dogLinks = this.props.dogs.map(dog => (\n            <li className=\"nav-item\" key={dog.name}>\n                <NavLink to={`/AdoptionApp/${dog.name}`} className=\"nav-link\" >\n                    {dog.name}\n                </NavLink>\n            </li>\n        ));       \n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <Link to=\"/AdoptionApp\" className=\"navbar-brand\">Dog App</Link>\n                <button \n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarNav\"\n                    aria-controls=\"navbarNav\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                    >\n                        <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                        <NavLink exact to=\"/AdoptionApp\" className=\"nav-link\">Home</NavLink>\n                        </li>\n                        {dogLinks}\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport { Client } from '@petfinder/petfinder-js';\nimport Routes from './Routes';\nimport Navbar from './Navbar';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component{\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      dogs: [],\n      isLoading: true\n    }\n  }\n\n  componentDidMount(){ \n        this.getDogs();\n  }\n\n  getDogs = () => {\n    const client = new Client({apiKey: \"aYkEPGGl0yVpNEu51e6NHlAVvHBtvUDdzZNkBqGx8ycXhzZTFM\", secret:\"UVn3DKS4Ne7jtUZdUcoY2uHRLwTIRpNX4DXaYqR0\"});\n    let Pets = [];\n    client.animal.search({\n      type: 'Dog',\n      location: \"New York, Ny\",\n      limit: 20,\n      })\n      .then( res => {\n        res.data.animals.map(pet => {\n          let dog = { name: pet.name, size: pet.size, photo: (pet.photos.length === 0 ? './images/bone.jpg' : pet.photos[0].large) , description: pet.description, age: pet.age, url: pet.url}\n          Pets.push(dog);\n        });\n        this.setState({ dogs: Pets, isLoading: false})\n      }).catch( e => {\n        console.log(e);\n        this.setState({isLoading: true})\n      })\n    }\n  render(){\n    const { isLoading } = this.state\n    let ren =(<div> \n                  <Navbar dogs={this.state.dogs} /> \n                    <div className=\"container\">\n                      <Routes dogs={this.state.dogs}/>\n                    </div>\n                </div>);\n    return (  \n      <div>{isLoading ? <div className=\"Loading\"><i className=\"Loading-bone em em-bone\" aria-role=\"presentation\" aria-label=\"BONE\"></i><h1>Loading...</h1></div> : ren}</div>     \n        \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // basename={process.env.PUBLIC_URL}\n  <BrowserRouter >\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}